#include <fstream>
#include <sstream>
#include <string>
#define _USE_MATH_DEFINES
#include <math.h>
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Projection_traits_xy_3.h>
#include <CGAL/Delaunay_triangulation_2.h>
#include <CGAL/Triangulation_2.h>

using namespace std;

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef CGAL::Projection_traits_xy_3<K> Gt;
typedef CGAL::Delaunay_triangulation_2<Gt> Delaunay;
typedef K::Point_3 Point;


class plane //a class that stores the crucial figures in terms of computing the orientation
{
public:
	static const int n = 3;			//the dimension of vectors
	const double ex = 0.95;			//we introduce the restriction of collinearity
	double first_vec[n];            //the first edge of a triangle
	double second_vec[n];			//the second edge of a triangle
	double third_vec[n];			//the third edge of a triangle
	double normal_vec[n];			//normal vector of a triangle
	double directional[n];			//the projection of the normal vector onto the horizontal plane
	double z_axis[n] = { 0,0,1 };   //the definition of the z-axis
	double doc;						//a variable that contains the collinearity coefficient
	double area;					//a variable that stores the area of a triangle
	bool lin_dependence;		    //a bool variable to check to answer whether points are (too) collinear
	string dip_degrees;             //a text variable to store the dip angle
	string azimuth_degrees;         //a text variable to store the dip direction
		
double dip_azimuth(double normal[], int n = 2) //a function that computes the dip azimuth
	{
		double coeff = 180 / M_PI;
		projection(normal);
		double angle = atan2(directional[0], directional[1]);
		if (angle < 0)
		{
			return (angle*coeff) + 360;
		}
		else
		{
			return (angle*coeff);
		}
	}

	double dip_angle(double z_axis[], double normal_v[]) //function that computes the dip angle
	{
		double angle;
		double expression;
		double coeff = 180 / M_PI;
		expression = abs(dot_product(z_axis, normal_v)) / (length(z_axis)*length(normal_v));
		angle = acos(expression);
		return angle*coeff;
	}

	double dot_product(double vector_line[], double direction[], int n = 3) //function that computes the dot product of vectors
	{
		double product = 0;
		for (int i = 0; i < n; i++)
		{
			product += direction[i] * vector_line[i];
		}
		return product;
	}

	bool dependence(double v1[], double v2[], double v3[]) //function that checks whether the points are collinear
	{
		double len_v1 = length(v1);
		double len_v2 = length(v2);
		double len_v3 = length(v3);
		double lengths[n] = { len_v1, len_v2, len_v3 };

		sort(lengths, lengths + n);
		this->doc = lengths[2] / (lengths[0] + lengths[1]);
		int k = 0;
		for (int i = 0; i < n; i++)
		{
			if (lengths[i] == 0)
			{
				k += 1;
			}
		}
		if (k != 0)
		{
			return true;
		}
		else
		{
			if (doc > ex)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}

	void projection(double vector[], int n = 2) //function that projects the normal vector onto the horizontal plane
	{
		if (vector[2] < 0)
		{
			this->directional[0] = -1 * vector[0];
			this->directional[1] = -1 * vector[1];
		}
		else
		{
			this->directional[0] = vector[0];
			this->directional[1] = vector[1];
		}
	}

	void get_normal(double v1[], double v2[], int n = 3)//function that computes the normal vector
	{
		normal_vec[0] = v1[1] * v2[2] - v2[1] * v1[2];
		normal_vec[1] = v1[2] * v2[0] - v2[2] * v1[0];
		normal_vec[2] = v1[0] * v2[1] - v2[0] * v1[1];
	}

	
	double length(double line_vector[], int n = 3) //function that computes the length of a vector
	{
		double vector_length = sqrt(pow(line_vector[0], 2) + pow(line_vector[1], 2) + pow(line_vector[2], 2));
		return vector_length;
	}

	
	string center(double point_1[], double point_2[], double point_3[]) //function that computes the geometrical centre of a triangle
	{
		double x = (point_1[0] + point_2[0] + point_3[0]) / 300.00;
		double y = (point_1[1] + point_2[1] + point_3[1]) / 300.00;
		return (to_string(x) + ";" + to_string(y));
	}

	plane(double point_1[], double point_2[], double point_3[]) //the class constructor
	{
		double first_try[n];
		double second_try[n];
		double third_try[n];

		for (int i = 0; i < n; i++)
		{
			first_try[i] = point_2[i] - point_1[i];
			second_try[i] = point_3[i] - point_1[i];
			third_try[i] = point_3[i] - point_2[i];
		}

		bool test = dependence(first_try, second_try, third_try);
		if (test == true)
		{
			lin_dependence = true;
		}
		else
		{
			lin_dependence = false;
			for (int i = 0; i < n; i++)
			{
				this->first_vec[i] = first_try[i];
				this->second_vec[i] = second_try[i];
				this->third_vec[i] = third_try[i];
			}
			normal_vec[0] = first_vec[1] * second_vec[2] - second_vec[1] * first_vec[2];
			normal_vec[1] = first_vec[2] * second_vec[0] - second_vec[2] * first_vec[0];
			normal_vec[2] = first_vec[0] * second_vec[1] - second_vec[0] * first_vec[1];

			double stala = 0.5;
			double half = stala *(length(first_vec) + length(second_vec) + length(third_vec));
			double s = sqrt(half*(half - length(first_vec))*(half - length(second_vec))*(half - length(third_vec)));
			this->area = s*0.0001;
		}


	}

	string measure()//function that supplies orientation results also for singularities
	{
		if (lin_dependence)
		{
			azimuth_degrees = ("LT");
			dip_degrees = ("LT");
			return (azimuth_degrees + ";" + dip_degrees);
		}
		else if (normal_vec[0] == 0 && normal_vec[1] == 0 && normal_vec[2] != 0)
		{
			dip_degrees = "0";
			azimuth_degrees = ("x");
			return (azimuth_degrees + ";" + dip_degrees);
		}
		else if (normal_vec[2] == 0)
		{
			dip_degrees = "90";
			azimuth_degrees = to_string(dip_azimuth(normal_vec));
			return azimuth_degrees + ";" + dip_degrees;
		}
		else
		{
			double dipping_angle = dip_angle(z_axis, normal_vec);
			dip_degrees = to_string(dipping_angle);
			azimuth_degrees = to_string(dip_azimuth(normal_vec));
			return azimuth_degrees + ";" + dip_degrees;
		}
	}
};

int main()
{

	string path_i, path_o; //text variables for input and output paths, respectively

	cout << "Type in the path of your input data:" << endl; //the user is required to type in the input path
	cout << "Example: C:\\dev\\CGAL-4.8\\examples\\Triangulation_2\\JurassicBottomInput.txt" << endl << endl;

	cin >> path_i;

	ifstream download(path_i);

	if (!download) cout << "Error in opening file" << endl; //the case when the file cannot be uploaded

	cout << "Type in the path of the output:" << endl; //the user is required to type in the output path
	cout << "Example: C:\\dev\\CGAL-4.8\\examples\\Triangulation_2\\JurassicBottomOutput.txt" << endl << endl;

	cin >> path_o;

	string tempor;//a temporary variable storing figures while uploading
	vector<Point> pts; //a variable storing points

	while (getline(download, tempor))//loading points line-by-line
	{
		istringstream convert(tempor);
		double a, b, c;
		if (!(convert >> a >> b >> c)) { break; }
		pts.push_back(Point(a, b, c));
	}

	Delaunay dt; //a variable storing the geometrical elements of Delaunay triangulation
	dt.insert(pts.begin(), pts.end());

	ofstream saving(path_o); //a stream variable to save output figures

	saving << "X1;" << "Y1;" << "Z1;" << "X2;" << "Y2;" << "Z2;" << "X3;" << "Y3;" << "Z3;" << "X_C;" //column names are saved
		<< "Y_C;" << "X_N;" << "Y_N;" << "Z_N;" << "Dip_dir;" << "Dip_ang;" << "DOC;" << "Area;" <<  endl;

	double point_1[3];
	double point_2[3];
	double point_3[3];

	for (Delaunay::Finite_faces_iterator fit = dt.finite_faces_begin(); fit != dt.finite_faces_end(); ++fit) //a loop for performing the Delaunay triangulation and save the results

	{
		Delaunay::Face_handle face = fit;
		point_1[0] = dt.triangle(face)[0][0]; //extracting coordinates of points building a Delaunay triangle
		point_1[1] = dt.triangle(face)[0][1];
		point_1[2] = dt.triangle(face)[0][2];

		point_2[0] = dt.triangle(face)[1][0];
		point_2[1] = dt.triangle(face)[1][1];
		point_2[2] = dt.triangle(face)[1][2];

		point_3[0] = dt.triangle(face)[2][0];
		point_3[1] = dt.triangle(face)[2][1];
		point_3[2] = dt.triangle(face)[2][2];

		plane current_plane = plane(point_1, point_2, point_3);					//constructing a plane that is processed at the moment
		string result = current_plane.measure();								//extracting the dip angle and the dip direction
		string centroid = current_plane.center(point_1, point_2, point_3);		//extracting the centroid of a Delaunay triangle

		double x_n = current_plane.normal_vec[0]; //extracting coordinates of the normal vector of a planar Delaunay triangle
		double y_n = current_plane.normal_vec[1];
		double z_n = current_plane.normal_vec[2];

		if (z_n < 0) //the case if the normal vector of a plane is directed downwards
		{
			x_n = -1*x_n / current_plane.length(current_plane.normal_vec); //we normalise the normal vectors by dividing them by their lengths
			y_n = -1*y_n / current_plane.length(current_plane.normal_vec);
			z_n = -1*z_n / current_plane.length(current_plane.normal_vec);
		}

		else //the case if the normal vector of a plane is directed upwards
		{
			x_n = x_n / current_plane.length(current_plane.normal_vec);
			y_n = y_n / current_plane.length(current_plane.normal_vec);
			z_n = z_n / current_plane.length(current_plane.normal_vec);
		}

		saving << to_string(point_1[0] / 100.00) << ";" << to_string( point_1[1] / 100.00) << ";" << to_string(point_1[2] / 100.00) << ";" << //saving orientation elements with respect to the column names
			to_string(point_2[0] / 100.00) << ";" << to_string(point_2[1] / 100.00) << ";" << to_string(point_2[2] / 100.00) << ";" <<
			to_string(point_3[0] / 100.00) << ";" << to_string( point_3[1] / 100.00) << ";" << to_string(point_3[2] / 100.00) << ";" <<
			centroid << ";" << x_n << ";" << y_n << "; " << z_n << ";" << result << ";" << current_plane.doc << ";" << current_plane.area << endl;
	}

	return 0;
}
